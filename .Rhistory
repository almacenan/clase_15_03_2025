setwd("~/")
setwd("C:/Users/Asus/Downloads/Maestria/Analisis_datos/Lab_ic_pilot/")
setwd("C:/Users/Asus/Downloads/Maestria/Analisis_datos/Lab_ic_pilot/clase_15_03_2025/")
beta0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnotm(n= 100, mean= 150, sf =70)# Los metros cuadrados
beta0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sf =70)# Los metros cuadrados
beta0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sd =70)# Los metros cuadrados
#x2 valorizacoin del secto
x2 <- runif(n=100,0,10)
x3 <- runif(n=100,0,10)
prec_sim <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error
beta_0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sd =70)# Los metros cuadrados
#x2 valorizacoin del secto
x2 <- runif(n=100,0,10)
x3 <- runif(n=100,0,10)
prec_sim <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error
beta_0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sd =70)# Los metros cuadrados
#x2 valorizacoin del secto
x2 <- runif(n=100,0,10)
x3 <- runif(n=100,0,10)
error <- rnorm(n=100,0,10)
prec_sim <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error
plot(prec_sim,x1)
plot(prec_sim,x2)
plot(prec_sim,x3)
modelo1 <- lm(prec_sim ~x1+x2+x3)
summary(modelo1)
# ' @descripcion: Este archivo contiene las funciones mas importantes para
#validar los supuestos de regresion lineal
test_batery <- function(modelo){
print("Testeando bUena especificacion")
espec_test <- resettest(modelo)
if(espec_test$p.value<0.05){
print("Revisar la especificacion del modelo")
}else{
print("El modelo paso el test de especificacion.")
}
}
print("tESTEANDO CONSITENCIA DEL MODELO")
p_value_F <- summary_modelo$fstatistic[1]
test_batery <- function(modelo){
summary_modelo <- summary(modelo)
print("Testeando bUena especificacion")
espec_test <- resettest(modelo)
if(espec_test$p.value<0.05){
print("Revisar la especificacion del modelo")
}else{
print("El modelo paso el test de especificacion.")
}
}
print("tESTEANDO CONSITENCIA DEL MODELO")
p_value_F <- summary_modelo$fstatistic[1]
test_batery <- function(modelo){
summary_modelo <- summary(modelo)
print("Testeando bUena especificacion")
espec_test <- resettest(modelo)
if(espec_test$p.value<0.05){
print("Revisar la especificacion del modelo")
}else{
print("El modelo paso el test de especificacion.")
}
}
print("tESTEANDO CONSITENCIA DEL MODELO")
p_value_F <- summary_modelo$fstatistic[1]
summary_modelo <- summary(modelo)
#Modelos y sus propiedades ------------------------
#@Modelos
beta_0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sd =70)# Los metros cuadrados
#x2 valorizacoin del secto
x2 <- runif(n=100,0,10)
x3 <- runif(n=100,0,10)
error <- rnorm(n=100,0,10)
prec_sim <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error
cor(prec_sim, x2)
plot(prec_sim,x1)
plot(prec_sim,x2)
plot(prec_sim,x3)
modelo <- lm(prec_sim ~x1+x2+x3)
summary(modelo)
test_batery(modelo)
beta_0 = 10
beta_1 = 5
beta_2 = 8
beta_3 = 10
x1 <- rnorm(n= 100, mean= 150, sd =70)# Los metros cuadrados
#x2 valorizacoin del secto
x2 <- runif(n=100,0,10)
x3 <- runif(n=100,0,10)
error <- rnorm(n=100,0,10)
prec_sim <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error
cor(prec_sim, x2)
plot(prec_sim,x1)
plot(prec_sim,x2)
plot(prec_sim,x3)
modelo <- lm(prec_sim ~x1+x2+x3)
summary(modelo)
test_batery(modelo)
#' @description: Este archivo contiene las funciones más importantes para validar los supuestos de regresión lineal
#'
test_batery <- function(modelo){
summary_modelo <- summary(modelo)
print("Testeando Buena especificación")
espec_test <- resettest(modelo)
if(espec_test$p.value < 0.05){
print("Revisar la especificación del modelo")
}else{
print("El modelo paso el test de especificación")
}
print("Testeando normalidad de errores")
espec_test <- shapiro.test(modelo$residuals)
if(espec_test$p.value > 0.05){
print("Revisar la normalidad del modelo")
}else{
print("El modelo paso el test de normalidad")
}
print("Testeando consistencia de errores")
p_value_F <- summary_modelo$fstatistic[1]
p_value__F_test <- pf(p_value_F,
summary_modelo$fstatistic[2],
summary_modelo$fstatistic[3],
lower.tail = FALSE)
if(espec_test$p.value < 0.05){
print("Revisar la consistencia del modelo - prueba F")
}else{
print("El modelo paso el test F")
}
print("Testeando ajuste de modelo")
r_cuadrado <- summary_modelo$r.squared
r_cuadrado_adj <- summary_modelo$adj.r.squared
print(paste("R cuadrado ajustado: ", round(r_cuadrado_adj, 3)))
if(r_cuadrado < 0.6){
print("el valor del R2 es mediocre")
}
if(r_cuadrado < 0.8 & r_cuadrado >= 0.6){
print("el valor de R2 es razonablemente bueno")
}else{
print("el modelo tiene buen ajuste con el R2")
}
print("testeando media de errores cero")
residuos <- modelo$residuals
pruebat_pv <- t.test(residuos)$p.value
if(pruebat_pv < 0.05){
print("media de los errores no son cero")
}else{
print("la media de los errores es cero")
print(paste("media: ", mean(residuos) %>% round(2)))
}
print("testeando heterocedasticidad")
test_het <- bptest(modelo)
if(test_het$p.value > 0.5){
print("el modelo tiene un comportamiento homocedastico")
}else{
print("el modelo parece tener un comportamiento heterocedastico")
}
}
grande
error1 <- rnorm(n=100, 25,70)
prec_sim1 <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error1
modelo1 <- lm(prec_sim1~ x1+x2+x3)
summary(modelo1)
test_batery(modelo1)
library(dplyr)
library(ggplot2)
library(MASS)
library(lmtest)
error1 <- rnorm(n=100, 25,70)
prec_sim1 <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error1
modelo1 <- lm(prec_sim1~ x1+x2+x3)
summary(modelo1)
test_batery(modelo1)
error3 <- rnorm(100, 0)*seq(from = 1, to = 500, length.out = 100)
plot(density(error3)) # Ponemos un error con una distribucion no normal
prec_sim3 <- beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3 + error3
modelo3 <- lm(prec_sim3 ~ x1 + x2 + x3)
summary(modelo3)
test_batery(modelo3)
